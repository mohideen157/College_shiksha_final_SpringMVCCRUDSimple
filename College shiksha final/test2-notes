Bit difference

#include<bits/stdc++.h>
using namespace std;


int countBitsFlip(int a, int b){
    
    int c=a^b,res=0;
    while(c>0){
        c=c&(c-1);
        res++;
    }
    return res;
    
}

int main()
{
	int t;
	cin>>t;
	while(t--) 
	{
		int a,b;
		cin>>a>>b; //input a and b

		cout<<countBitsFlip(a, b)<<endl;
	}
	return 0;
}  












Longest consecutive 1's



#include <bits/stdc++.h>
using namespace std;


 

int maxConsecutiveOnes(int x)
{
    int count=0;
    while(x){
        x=x&(x>>1);
        count++;
    }
    return count;
    
}



int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		cout<<maxConsecutiveOnes(n)<<endl;
	}
	return 0;
}  



Longest Arithmetic Progression
#include <iostream>
using namespace std;
int main()
 {
	int t;
        cin>>t;
        while(t--)
        {
         int n;
         scanf("%d",&n);
          int a[n];
          int i,j;
          for(i=0;i<n;i++)
          cin>>a[i];
          if(n<=2)
          cout<<n<<endl;
          else
          {
          int dp[n][n];
          for(i=0;i<n;i++)
          dp[i][n-1]=2;
          int llpa=2;
          for(j=n-2;j>=1;j--)
          {
              int i=j-1,k=j+1;
              while(i>=0 && k<=n-1)
              {
                  if(a[i]+a[k]<2*a[j])
                  k++;
                  else if(a[i]+a[k]>2*a[j])
                  {
                      dp[i][j]=2;
                      i--;
                  }
                  else
                  {
                      dp[i][j]=dp[j][k]+1;
                      llpa=max(llpa,dp[i][j]);
                      i--;
                      k++;
                  }
              }
              while(i>=0)
              {
                  dp[i][j]=2;
                  i--;
              }
          }
          cout<<llpa<<endl;
          }
          
        }
	return 0;
}











Solve the Sudoku



#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


 // } Driver Code Ends


class Solution {
  public:
   bool isSafe(int grid[N][N], int i, int j, int n)
{
    for(int k = 0; k < N; k++)
    {
        if(grid[i][k] == n || grid[k][j] == n)
        {
            return false;
        }
    }
    
    int s = sqrt(N);
    int rs = i - i%s;
    int cs = j - j%s;
    
    for(int i = 0; i < s; i++)
    {
        for(int j = 0; j < s; j++)
        {
            if(grid[i+rs][j+cs] == n)
            {
                return false;
            }
        }
    }
    
    return true;
}

bool SolveSudoku(int grid[N][N])  
{
    int i, j;

    for(i = 0; i < N; i++)
    {
        bool flag = false;
        for(j = 0; j < N; j++)
        {
            if(grid[i][j] == 0)
            {
                flag = true;
                break;
            }
        }
        if(flag == true)
        {
            break;
        }
    }
    
    if(i == N && j == N)
    {
        return true;
    }
    
    
    for(int n = 1; n <= N; n++)
    {
        
        if(isSafe(grid, i, j, n) == true)
        {
            grid[i][j] = n;
            
            if(SolveSudoku(grid) == true)
            {
                return true;
            }
            
            grid[i][j] = 0;
        }
    }
    
    return false;
}

void printGrid (int grid[N][N]) 
{
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < N; j++)
        {
            cout << grid[i][j] << " ";
        }
    }
}
};

// { Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	}
	
	return 0;
}  // } Driver Code Ends